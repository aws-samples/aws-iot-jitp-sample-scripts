# vim: set ts=2 sw=2 et:
# 
# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
# 
AWSTemplateFormatVersion: 2010-09-09
Description: Setup AWS IoT Policies and IAM Roles

Resources:
  IoTProvisioningRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}IoTProvisioning"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: "iot.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}ThingRegistrationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: Allow
                Action:
                  - "iot:AddThingToThingGroup"
                  - "iot:AttachPrincipalPolicy"
                  - "iot:AttachThingPrincipal"
                  - "iot:CreateCertificateFromCsr"
                  - "iot:CreatePolicy"
                  - "iot:CreateThing"
                  - "iot:DescribeCertificate"
                  - "iot:DescribeThing"
                  - "iot:DescribeThingGroup"
                  - "iot:DescribeThingType"
                  - "iot:DetachThingPrincipal"
                  - "iot:GetPolicy"
                  - "iot:ListPolicyPrincipals"
                  - "iot:ListPrincipalPolicies"
                  - "iot:ListPrincipalThings"
                  - "iot:ListThingGroupsForThing"
                  - "iot:ListThingPrincipals"
                  - "iot:RegisterCertificate"
                  - "iot:RegisterThing"
                  - "iot:RemoveThingFromThingGroup"
                  - "iot:UpdateCertificate"
                  - "iot:UpdateThing"
                  - "iot:UpdateThingGroupsForThing"
                Resource: "*"
        -
          PolicyName: !Sub "${AWS::StackName}ThingRegistrationLogginPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:PutMetricFilter"
                  - "logs:PutRetentionPolicy"
                  - "logs:GetLogEvents"
                  - "logs:DeleteLogStream"
                Resource: "*"  
        -
          PolicyName: !Sub "${AWS::StackName}ThingRegistrationRuleActionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "kinesis:PutRecord"
                  - "iot:Publish"
                  - "s3:PutObject"
                  - "sns:Publish"
                  - "sqs:SendMessage*"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:PutMetricData"
                  - "es:ESHttpPut"
                  - "firehose:PutRecord"
                Resource: "*"

  IoTAccess:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyName: !Sub "${AWS::StackName}IoTAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Action:
              - "iot:Connect"
            Effect: Allow
            Resource: { "Fn::Join" : [ "", ["arn:aws:iot:",{ "Fn::Sub": "${AWS::Region}" },":", { "Fn::Sub": "${AWS::AccountId}" }, ":client/${iot:Certificate.Subject.CommonName}"]] }
          -
            Action:
              - "iot:Subscribe"
              - "iot:Receive"
            Effect: Allow
            Resource: { "Fn::Join" : [ "", ["arn:aws:iot:", { "Fn::Sub": "${AWS::Region}" },":", { "Fn::Sub": "${AWS::AccountId}"}, ":topicfilter/${iot:Certificate.Subject.CommonName}/cmd/+"]] }
          - 
            Action:
              - "iot:Publish"
            Effect: Allow
            Resource: { "Fn::Join" : [ "", ["arn:aws:iot:",{ "Fn::Sub": "${AWS::Region}" },":", { "Fn::Sub": "${AWS::AccountId}" }, ":topic/${iot:Certificate.Subject.CommonName}/data/*"]] }

  JITPFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Role: !GetAtt CustomLambdaRole.Arn
      MemorySize: 512
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 30
      Code:
        ZipFile: |
          const aws = require('aws-sdk')
          const https = require('https')
          const url = require('url')
          const process = require('process')
          const child = require('child_process')
          const report = function(status,event,context,data) {
            const parsedUrl = url.parse(event.ResponseURL)
            const result = JSON.stringify({
              Status: status, 
              RequestId: event.RequestId,
              StackId: event.StackId,
              LogicalResourceId: event.LogicalResourceId,
              Data: data
            })
            var request = https.request({
              hostname: parsedUrl.hostname,
              port: 443,
              path: parsedUrl.path,
              method: "PUT",
              headers: {
                "content-type": "",
                "content-length": result.length
              }, function(response) {
                if (event.ResourceProperties.Debug)
                  console.log(response)
                context.done()  // finish the request
              })
            request.on('error', function(error) {
              console.log(error)
              context.done()
            })
            exports.handler = function(event,context) {
              if 
            }
